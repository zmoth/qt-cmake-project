find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets) # 识别是Qt6还是Qt5
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)
message(STATUS "[${PROJECT_NAME}] QT_VERSION: ${QT_VERSION}; QT_DIR: ${QT_DIR}")

# 加入一个配置头文件，用于处理 CMake 对源码的设置
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/config.h.in" "${CMAKE_CURRENT_BINARY_DIR}/config.h")

if(APPLE)
  # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
  # generated by CMake. This variable contains the .icns file name,
  # without the path.
  set(MACOSX_BUNDLE_ICON_FILE icon.icns)

  # And the following tells CMake where to find and install the file itself.
  set(app_icon_macos "${CMAKE_SOURCE_DIR}/data/img/icon/icon.icns")
  set_source_files_properties(${app_icon_macos} PROPERTIES
          MACOSX_PACKAGE_LOCATION "Resources")

  add_executable(${PROJECT_NAME} MACOSX_BUNDLE main.cpp ${app_icon_macos})
else()
  add_executable(${PROJECT_NAME})
endif()

file(GLOB_RECURSE SRCS *.cpp)
file(GLOB_RECURSE INCS *.hpp *.h)

target_sources(${PROJECT_NAME}
  PRIVATE ${INCS} ${SRCS} # main.cpp
  PRIVATE ${CMAKE_SOURCE_DIR}/data/res.qrc
  PRIVATE ${CMAKE_SOURCE_DIR}/data/res.rc # windows binary icon resource file
)

add_subdirectory(core)
add_subdirectory(ui)

# 设置头文件路径
target_include_directories(
  ${PROJECT_NAME}
  PUBLIC $<INSTALL_INTERFACE:include>
  PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
  PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
)

target_link_libraries(${PROJECT_NAME}
  PRIVATE
    Qt${QT_VERSION_MAJOR}::Widgets
)

if (UNIX AND NOT APPLE)
    set_property(TARGET ${PROJECT_NAME}
      PROPERTY INSTALL_RPATH "$ORIGIN")
  elseif (APPLE)
    set_property(TARGET ${PROJECT_NAME}
      PROPERTY INSTALL_RPATH "@loader_path")
  endif()

# 编译选项
target_compile_definitions(
  ${PROJECT_NAME}
  PRIVATE QT_NO_KEYWORDS
  PRIVATE QT_MESSAGELOGCONTEXT # release下也能打印文件，函数
)

set_target_properties(${PROJECT_NAME} PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER zmoth.com
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

install(
  TARGETS ${PROJECT_NAME}
  EXPORT ${PROJECT_NAME}Targets
  # COMPONENT ${PROJECT_NAME}
  BUNDLE DESTINATION .
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# Install Translations
install(FILES ${QM_FILES} DESTINATION ${CMAKE_INSTALL_BINDIR}/translations)

# include(${CMAKE_SOURCE_DIR}/cmake/DeployQt.cmake)

# if(WIN32)
#   windeployqt(${PROJECT_NAME})
# elseif(APPLE)
#   # macdeployqt(${PROJECT_NAME}) # FIXME: 
# endif()

# install(FILES "$<TARGET_FILE_DIR:${PROJECT_NAME}>/" DESTINATION ${CMAKE_INSTALL_BINDIR})
